{"version":3,"file":"index.js","sources":["../../../dist/zmdc.js","../../lib/index.js"],"sourcesContent":["export const JS_EXAMPLE_EL_QUERY = 'code[class*=\"language-javascript\"]';\nexport const HTML_EXAMPLE_EL_QUERY = 'code[class*=\"language-html\"]';\n//export const DEMO_INDICATOR = /^((?<level>(export|return))\\s+)?(async(\\s+))?function(\\*?)(\\s+)demo(?<fnName>\\w+)(\\s)*\\(/m;\nexport const DEMO_BLOCK_INDICATOR = /^\\/\\/(\\s*)tag:(\\s*)(?<name>(\\w+[\\w\\-_]*))/m;\n/**\n * escape HTML specific character.\n * @param text text to insert into HTML\n * @return escaped text\n * */\nexport const htmlEscape = (text) => {\n    return text.replaceAll(\"&\", \"&amp;\")\n        .replaceAll(\"<\", \"&lt;\")\n        .replaceAll(\">\", \"&gt;\")\n        .replaceAll('\"', \"&quot;\")\n        .replaceAll(\"'\", \"&#39;\");\n};\n/**\n * recognize demo functions and parse them to an Array of Example {@see Example}.\n * A function is recognized as an example, if its declaration begins with `export function demo`.\n * For example:\n * ```\n * export function demoFancyImageProcessing(img) {\n *      // tag: demo-1\n *      const metadata = auxiliaryFunction(img);\n *      const fancyImage = doSomeFancyStuff(img, metadata);\n *      // <div id=\"result\">\n *      document.getElementById(\"result\").innerHTML = `<img src=\"${fancyImage}\" alt=\"\">`;\n * }\n * ```\n * @param code example code\n * @return Example[]\n * */\nexport function parseExampleFunctions(code) {\n    const example = [];\n    //let functionLines = [];\n    const state = {\n        inBlock: false,\n        openCurly: 0,\n        closeCurly: 0,\n        fnName: \"\",\n        fnLines: []\n    };\n    for (const line of code.split('\\n')) {\n        if (!state.inBlock) {\n            const trimmedLine = line.trimEnd();\n            const matched = DEMO_BLOCK_INDICATOR.exec(trimmedLine);\n            if (matched) {\n                // recognize a new demo function\n                state.inBlock = true;\n                state.fnName = matched.groups[\"name\"];\n                continue;\n            }\n        }\n        if (state.inBlock) {\n            state.fnLines.push(line);\n            const { openCurly, closeCurly } = countCurly(line);\n            state.openCurly += openCurly;\n            state.closeCurly += closeCurly;\n            if (state.openCurly === state.closeCurly) {\n                example.push(parseCode(state));\n                // reset state\n                state.inBlock = false;\n                state.openCurly = 0;\n                state.closeCurly = 0;\n                state.fnName = \"\";\n                state.fnLines = [];\n            }\n        }\n    }\n    return example;\n}\nfunction countCurly(line) {\n    const length = line.length;\n    const openCurly = length - (line.replaceAll('{', '').length);\n    const closeCurly = length - (line.replaceAll('}', '').length);\n    return { openCurly, closeCurly };\n}\n/**\n * show an Example in a DOM\n * @param example the example, which is the result of {@see #parseCode} by parsing an example function.\n * @param fmt a formatter. The default formatter just escapes HTML specific character.\n *\n * */\nexport function showExampleCode(example, fmt = { js: htmlEscape, html: htmlEscape }) {\n    const { js, html, elId } = { ...example };\n    const el = document.getElementById(elId);\n    if (el) {\n        if (js.length > 0) {\n            const jsContainer = el.querySelector(JS_EXAMPLE_EL_QUERY);\n            if (jsContainer) {\n                jsContainer.innerHTML = fmt.js(js);\n            }\n            else {\n                throw new Error(`Container id ${elId} does not contain ${JS_EXAMPLE_EL_QUERY} but javascript example is not empty`);\n            }\n        }\n        if (html.length > 0) {\n            const htmlContainer = el.querySelector(HTML_EXAMPLE_EL_QUERY);\n            if (htmlContainer) {\n                htmlContainer.innerHTML = fmt.html(html);\n            }\n            else {\n                throw new Error(`Container id ${elId} does not contain ${HTML_EXAMPLE_EL_QUERY} but HTML example is not empty`);\n            }\n        }\n    }\n    else {\n        throw new Error(`Container element with id=\"${elId}\" not found`);\n    }\n}\nexport function parseCode(state) {\n    const functionLines = state.fnLines;\n    const FUNCTION_INDENT_SIZE = 4;\n    const js = [];\n    const html = [];\n    const functionBodyLines = functionLines.slice(1, -1);\n    if (functionBodyLines.length === 0) {\n        js.push('');\n        html.push('');\n    }\n    for (const line of functionBodyLines) {\n        const chars = line.slice(FUNCTION_INDENT_SIZE).trimEnd();\n        const htmlComment = validHTML(chars);\n        if (htmlComment.isComment) {\n            html.push(htmlComment.value);\n        }\n        else {\n            js.push(chars);\n        }\n    }\n    const elId = state.fnName; //parseElId(functionLines[1]);\n    return { js: js.join('\\n'), html: html.join('\\n'), elId };\n}\nfunction validHTML(chars) {\n    const HTML_INDICATOR = /^(\\/\\/(\\s+))</m;\n    const CROPPED_PREFIX = '// '.length;\n    const matches = HTML_INDICATOR.exec(chars);\n    if (matches) {\n        return {\n            isComment: true,\n            value: chars.slice(CROPPED_PREFIX)\n        };\n    }\n    return {\n        isComment: false\n    };\n}\n//# sourceMappingURL=zmdc.js.map","import {JS_EXAMPLE_EL_QUERY, HTML_EXAMPLE_EL_QUERY,\n    htmlEscape, parseExampleFunctions, showExampleCode} from '../../dist/zmdc.js';\n\nimport './index.css';\n\n\nimport Prism from 'prismjs';\n\nwindow.Prism = Prism;\n\n// tag: howto-show-demo-code\n//{\n    document.addEventListener(\"DOMContentLoaded\", async () => {\n        demoUsageTextFormatFunction();\n        const MYSELF = 'code/index.js'\n        await showDemoCode(MYSELF);\n        verifyContentOfFanyDemo();\n        if(window.Prism) {\n            window.Prism.highlightAll();\n        }\n    });\n//}\n\nfunction formatFancy(text) {\n    const escaped = htmlEscape(text);\n    return `<span style=\"color:#fe2f33;font-weight:bold\">${escaped}</span>`;\n}\n\n\n// tag: fancy-demo\nfunction demoUsageTextFormatFunction() {\n    const text = \"Funny texts don't need Comic Sans\";\n    const fancy = formatFancy(text);\n    // <span id=\"ff-result\"></span>\n    document.getElementById(\"ff-result\").innerHTML = fancy;\n}\n\n// tag: howto-prepare-demo-function\nfunction howToPrepareDemoFunction () {\n    function demoUsageTextFormatFunction() {\n        const text = \"Funny texts don't need Comic Sans\";\n        const fancy = formatFancy(text);\n        // <span id=\"ff-result\"></span>\n        document.getElementById(\"ff-result\").innerHTML = fancy;\n    }\n    // <span id=\"ff-result\"></span>\n}\n\n// tag: howto-run-demo-function\nfunction howtoRunDemoFunction() {\n    demoUsageTextFormatFunction();\n}\n\n// tag: howto-mark-demo-info\nfunction howtoMarkDemoInfo() {\n    // tag: fancy-demo\n    function demoUsageTextFormatFunction() {\n        const text = \"Funny texts don't need Comic Sans\";\n        const fancy = formatFancy(text);\n        document.getElementById(\"ff-result\").innerHTML = fancy;\n        // <span id=\"ff-result\">\n    }\n    // <div id=\"fancy-demo\">\n    //     <pre><code class=\"language-javascript\"></code><pre>\n    //     <pre><code class=\"language-html\"></code></pre>\n    // </div>\n}\n\n\n/**\n * this function can also load any other demo script.\n * */\n// tag: howto-load-demo-code\n//{\n    async function showDemoCode(demoScript) {\n        const response = await fetch(demoScript, {method: 'GET'});\n        const text = await response.text();\n        const demoExamples = parseExampleFunctions(text);\n        for (const example of demoExamples) {\n            showExampleCode(example);\n        }\n    }\n//}\n\n// tag: verify-contents-of-fancy-demo\nfunction verifyContentOfFanyDemo() {\n    const id = \"fancy-demo\";\n    const verifyId = \"duplicate-fancy-demo\";\n\n    function showCode(bySelector) {\n        const div = document.getElementById(id);\n        const code = div.querySelector(bySelector).innerHTML;\n        const verify = document.getElementById(verifyId);\n        verify.querySelector(bySelector).innerHTML = code;\n    }\n\n    // <div id=\"duplicate-fancy-demo\">\n    //    <pre><code class=\"language-javascript\"></code></pre>\n    //    <pre><code class=\"language-html\"></code></pre>\n    // </div>\n    showCode(JS_EXAMPLE_EL_QUERY);\n    showCode(HTML_EXAMPLE_EL_QUERY);\n}\n"],"names":["JS_EXAMPLE_EL_QUERY","HTML_EXAMPLE_EL_QUERY","DEMO_BLOCK_INDICATOR","htmlEscape","text","parseExampleFunctions","code","example","state","line","trimmedLine","matched","openCurly","closeCurly","countCurly","parseCode","length","showExampleCode","fmt","js","html","elId","el","jsContainer","htmlContainer","functionLines","FUNCTION_INDENT_SIZE","functionBodyLines","chars","htmlComment","validHTML","Prism","demoUsageTextFormatFunction","showDemoCode","verifyContentOfFanyDemo","formatFancy","fancy","demoScript","demoExamples","id","verifyId","showCode","bySelector","verify"],"mappings":";AAAO,MAAMA,IAAsB,sCACtBC,IAAwB,gCAExBC,IAAuB,8CAMvBC,IAAa,CAACC,MAChBA,EAAK,WAAW,KAAK,OAAO,EAC9B,WAAW,KAAK,MAAM,EACtB,WAAW,KAAK,MAAM,EACtB,WAAW,KAAK,QAAQ,EACxB,WAAW,KAAK,OAAO;AAkBzB,SAASC,EAAsBC,GAAM;AACxC,QAAMC,IAAU,CAAE,GAEZC,IAAQ;AAAA,IACV,SAAS;AAAA,IACT,WAAW;AAAA,IACX,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,SAAS,CAAA;AAAA,EACZ;AACD,aAAWC,KAAQH,EAAK,MAAM;AAAA,CAAI,GAAG;AACjC,QAAI,CAACE,EAAM,SAAS;AAChB,YAAME,IAAcD,EAAK,QAAS,GAC5BE,IAAUT,EAAqB,KAAKQ,CAAW;AACrD,UAAIC,GAAS;AAET,QAAAH,EAAM,UAAU,IAChBA,EAAM,SAASG,EAAQ,OAAO;AAC9B;AAAA,MAChB;AAAA,IACA;AACQ,QAAIH,EAAM,SAAS;AACf,MAAAA,EAAM,QAAQ,KAAKC,CAAI;AACvB,YAAM,EAAE,WAAAG,GAAW,YAAAC,MAAeC,EAAWL,CAAI;AACjD,MAAAD,EAAM,aAAaI,GACnBJ,EAAM,cAAcK,GAChBL,EAAM,cAAcA,EAAM,eAC1BD,EAAQ,KAAKQ,EAAUP,CAAK,CAAC,GAE7BA,EAAM,UAAU,IAChBA,EAAM,YAAY,GAClBA,EAAM,aAAa,GACnBA,EAAM,SAAS,IACfA,EAAM,UAAU,CAAE;AAAA,IAElC;AAAA,EACA;AACI,SAAOD;AACX;AACA,SAASO,EAAWL,GAAM;AACtB,QAAMO,IAASP,EAAK,QACdG,IAAYI,IAAUP,EAAK,WAAW,KAAK,EAAE,EAAE,QAC/CI,IAAaG,IAAUP,EAAK,WAAW,KAAK,EAAE,EAAE;AACtD,SAAO,EAAE,WAAAG,GAAW,YAAAC,EAAY;AACpC;AAOO,SAASI,EAAgBV,GAASW,IAAM,EAAE,IAAIf,GAAY,MAAMA,KAAc;AACjF,QAAM,EAAE,IAAAgB,GAAI,MAAAC,GAAM,MAAAC,EAAI,IAAK,EAAE,GAAGd,EAAS,GACnCe,IAAK,SAAS,eAAeD,CAAI;AACvC,MAAIC,GAAI;AACJ,QAAIH,EAAG,SAAS,GAAG;AACf,YAAMI,IAAcD,EAAG,cAActB,CAAmB;AACxD,UAAIuB;AACA,QAAAA,EAAY,YAAYL,EAAI,GAAGC,CAAE;AAAA;AAGjC,cAAM,IAAI,MAAM,gBAAgBE,CAAI,qBAAqBrB,CAAmB,sCAAsC;AAAA,IAElI;AACQ,QAAIoB,EAAK,SAAS,GAAG;AACjB,YAAMI,IAAgBF,EAAG,cAAcrB,CAAqB;AAC5D,UAAIuB;AACA,QAAAA,EAAc,YAAYN,EAAI,KAAKE,CAAI;AAAA;AAGvC,cAAM,IAAI,MAAM,gBAAgBC,CAAI,qBAAqBpB,CAAqB,gCAAgC;AAAA,IAE9H;AAAA,EACA;AAEQ,UAAM,IAAI,MAAM,8BAA8BoB,CAAI,aAAa;AAEvE;AACO,SAASN,EAAUP,GAAO;AAC7B,QAAMiB,IAAgBjB,EAAM,SACtBkB,IAAuB,GACvBP,IAAK,CAAE,GACPC,IAAO,CAAE,GACTO,IAAoBF,EAAc,MAAM,GAAG,EAAE;AACnD,EAAIE,EAAkB,WAAW,MAC7BR,EAAG,KAAK,EAAE,GACVC,EAAK,KAAK,EAAE;AAEhB,aAAWX,KAAQkB,GAAmB;AAClC,UAAMC,IAAQnB,EAAK,MAAMiB,CAAoB,EAAE,QAAS,GAClDG,IAAcC,EAAUF,CAAK;AACnC,IAAIC,EAAY,YACZT,EAAK,KAAKS,EAAY,KAAK,IAG3BV,EAAG,KAAKS,CAAK;AAAA,EAEzB;AACI,QAAMP,IAAOb,EAAM;AACnB,SAAO,EAAE,IAAIW,EAAG,KAAK;AAAA,CAAI,GAAG,MAAMC,EAAK,KAAK;AAAA,CAAI,GAAG,MAAAC,EAAM;AAC7D;AACA,SAASS,EAAUF,GAAO;AAItB,SAHuB,iBAEQ,KAAKA,CAAK,IAE9B;AAAA,IACH,WAAW;AAAA,IACX,OAAOA,EAAM,MAAM,CAAc;AAAA,EACpC,IAEE;AAAA,IACH,WAAW;AAAA,EACd;AACL;AC1IA,OAAO,QAAQG;AAIX,SAAS,iBAAiB,oBAAoB,YAAY;AACtD,EAAAC,EAA6B,GAE7B,MAAMC,EADS,eACU,GACzBC,EAAyB,GACtB,OAAO,SACN,OAAO,MAAM,aAAc;AAEvC,CAAK;AAGL,SAASC,EAAY/B,GAAM;AAEvB,SAAO,gDADSD,EAAWC,CAAI,CAC+B;AAClE;AAIA,SAAS4B,IAA8B;AAEnC,QAAMI,IAAQD,EADD,mCACiB;AAE9B,WAAS,eAAe,WAAW,EAAE,YAAYC;AACrD;AAuCI,eAAeH,EAAaI,GAAY;AAEpC,QAAMjC,IAAO,OADI,MAAM,MAAMiC,GAAY,EAAC,QAAQ,MAAK,CAAC,GAC5B,KAAM,GAC5BC,IAAejC,EAAsBD,CAAI;AAC/C,aAAWG,KAAW+B;AAClB,IAAArB,EAAgBV,CAAO;AAEnC;AAIA,SAAS2B,IAA0B;AAC/B,QAAMK,IAAK,cACLC,IAAW;AAEjB,WAASC,EAASC,GAAY;AAE1B,UAAMpC,IADM,SAAS,eAAeiC,CAAE,EACrB,cAAcG,CAAU,EAAE,WACrCC,IAAS,SAAS,eAAeH,CAAQ;AAC/C,IAAAG,EAAO,cAAcD,CAAU,EAAE,YAAYpC;AAAA,EACrD;AAMI,EAAAmC,EAASzC,CAAmB,GAC5ByC,EAASxC,CAAqB;AAClC;"}