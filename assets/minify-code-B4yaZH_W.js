const a='code[class*="example-javascript"]',u='code[class*="example-html"]',p=/^((?<level>(export|return))\s+)?(async(\s+))?function(\*?)(\s+)demo(?<fnName>\w+)(\s)*\(/m,m=n=>n.replaceAll("&","&amp;").replaceAll("<","&lt;").replaceAll(">","&gt;").replaceAll('"',"&quot;").replaceAll("'","&#39;");function h(n){const t=[],e={inFunction:!1,openCurly:0,closeCurly:0,fnName:"",fnModify:"",fnLines:[]};for(const o of n.split(`
`)){if(!e.inFunction){const s=o.trim(),c=p.exec(s);c&&(e.inFunction=!0,e.fnName=c.groups.fnName,e.fnModify=c.groups.level)}if(e.inFunction){e.fnLines.push(o);const{openCurly:s,closeCurly:c}=d(o);e.openCurly+=s,e.closeCurly+=c,e.openCurly===e.closeCurly&&(t.push(E(e)),e.inFunction=!1,e.openCurly=0,e.closeCurly=0,e.fnName="",e.fnModify="",e.fnLines=[])}}return t}function d(n){const t=n.length,e=t-n.replaceAll("{","").length,o=t-n.replaceAll("}","").length;return{openCurly:e,closeCurly:o}}function C(n,t={js:m,html:m}){const{js:e,html:o,elId:s}={...n},c=document.getElementById(s);if(c){if(e.length>0){const l=c.querySelector(a);if(l)l.innerHTML=t.js(e);else throw new Error(`Container id ${s} does not contain ${a} but javascript example is not empty`)}if(o.length>0){const l=c.querySelector(u);if(l)l.innerHTML=t.html(o);else throw new Error(`Container id ${s} does not contain ${u} but HTML example is not empty`)}}else throw new Error(`Container element with id="${s}" not found`)}function E(n){const t=n.fnLines,e=4,o=[],s=[],c=t.slice(2,-1);c.length===0&&(o.push(""),s.push(""));for(const f of c){const r=f.slice(e).trimEnd(),i=L(r);i.isComment?s.push(i.value):o.push(r)}const l=y(t[1]);return{js:o.join(`
`),html:s.join(`
`),elId:l,name:n.fnName}}function y(n){n=n.trim();const t="// tag:";if(n.startsWith(t))return n.slice(t.length).trim();throw new Error(`'${n}' not started with ${t}`)}function L(n){return/^(\/\/(\s+))</m.exec(n)?{isComment:!0,value:n.slice(3)}:{isComment:!1}}async function I(){const n="minify-code.js";document.readyState==="interactive"?await t(n):document.addEventListener("DOMContentLoaded",async()=>{await t(n)});async function t(e){const s=await(await fetch(e,{method:"GET"})).text(),c=h(s);for(const l of c)C(l)}}export{u as H,a as J,I as d,m as h,h as p,C as s};
